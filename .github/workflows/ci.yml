name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  TIMEZONE: 'America/Detroit'

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit

    - name: Generate Prisma client
      run: npx prisma generate
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test

    - name: Run ESLint
      run: npm run lint

    - name: Run TypeScript check
      run: npm run typecheck

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: splashtastic_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit

    - name: Setup test database
      run: |
        npx prisma migrate deploy
        npx prisma db seed
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/splashtastic_test
        NODE_ENV: test

    - name: Run unit tests
      run: npm run test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/splashtastic_test
        TIMEZONE: ${{ env.TIMEZONE }}
        NEXT_PUBLIC_SITE_URL: http://localhost:3000

    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      if: success()
      with:
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-unit

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: splashtastic_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Setup test database
      run: |
        npx prisma migrate deploy
        npx prisma db seed
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/splashtastic_test
        NODE_ENV: test

    - name: Build application
      run: npm run build
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/splashtastic_test
        NEXT_PUBLIC_SITE_URL: http://localhost:3000
        STRIPE_SECRET_KEY: sk_test_fake_key_for_build
        NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: pk_test_fake_key_for_build
        RESEND_API_KEY: re_fake_key_for_build
        GOOGLE_MAPS_API_KEY: fake_key_for_build
        ADMIN_PASSCODE: test-passcode

    - name: Run E2E tests
      run: npm run test:ui
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/splashtastic_test
        TIMEZONE: ${{ env.TIMEZONE }}
        NEXT_PUBLIC_SITE_URL: http://localhost:3000
        STRIPE_SECRET_KEY: sk_test_51234567890
        NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: pk_test_51234567890
        RESEND_API_KEY: re_test_key
        GOOGLE_MAPS_API_KEY: test_key
        ADMIN_PASSCODE: test-passcode

    - name: Upload Playwright report
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit

    - name: Generate Prisma client
      run: npx prisma generate
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test

    - name: Build application
      run: npm run build
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test
        NEXT_PUBLIC_SITE_URL: http://localhost:3000
        STRIPE_SECRET_KEY: sk_test_fake_key_for_build
        NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: pk_test_fake_key_for_build
        RESEND_API_KEY: re_fake_key_for_build
        GOOGLE_MAPS_API_KEY: fake_key_for_build
        ADMIN_PASSCODE: test-passcode

    - name: Cache build output
      uses: actions/cache@v3
      with:
        path: |
          .next/cache
          .next/static
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit

    - name: Run security audit
      run: npm audit --audit-level=high

    - name: Run dependency check
      run: npx better-npm-audit audit --level high

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: splashtastic_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit

    - name: Setup test database
      run: |
        npx prisma migrate deploy
        npx prisma db seed
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/splashtastic_test

    - name: Build application
      run: npm run build
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/splashtastic_test
        NEXT_PUBLIC_SITE_URL: http://localhost:3000
        STRIPE_SECRET_KEY: sk_test_fake_key
        NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: pk_test_fake_key
        RESEND_API_KEY: re_fake_key
        GOOGLE_MAPS_API_KEY: fake_key
        ADMIN_PASSCODE: test-passcode

    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x

    - name: Run Lighthouse CI
      run: |
        npm start &
        sleep 30
        lhci autorun
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/splashtastic_test
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  deployment-check:
    name: Deployment Check
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests, build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate render.yaml
      run: |
        # Basic validation of render.yaml syntax
        python -c "import yaml; yaml.safe_load(open('render.yaml'))"

    - name: Check environment variables
      run: |
        # Ensure all required env vars are documented
        grep -q "DATABASE_URL" render.yaml
        grep -q "STRIPE_SECRET_KEY" render.yaml
        grep -q "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY" render.yaml
        grep -q "RESEND_API_KEY" render.yaml
        grep -q "GOOGLE_MAPS_API_KEY" render.yaml
        echo "✓ All required environment variables found in render.yaml"

    - name: Validate Prisma schema
      run: npx prisma validate
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests, e2e-tests, build, security]
    if: always()
    
    steps:
    - name: Check job results
      run: |
        echo "Lint and Typecheck: ${{ needs.lint-and-typecheck.result }}"
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "E2E Tests: ${{ needs.e2e-tests.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "Security: ${{ needs.security.result }}"
        
        if [[ "${{ needs.lint-and-typecheck.result }}" == "failure" || 
              "${{ needs.unit-tests.result }}" == "failure" || 
              "${{ needs.e2e-tests.result }}" == "failure" || 
              "${{ needs.build.result }}" == "failure" || 
              "${{ needs.security.result }}" == "failure" ]]; then
          echo "❌ CI pipeline failed"
          exit 1
        else
          echo "✅ CI pipeline passed"
        fi
